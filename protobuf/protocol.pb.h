// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_protocol_2eproto_metadata_getter(int index);
class P2SResponse;
struct P2SResponseDefaultTypeInternal;
extern P2SResponseDefaultTypeInternal _P2SResponse_default_instance_;
class PeerInfo;
struct PeerInfoDefaultTypeInternal;
extern PeerInfoDefaultTypeInternal _PeerInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::P2SResponse* Arena::CreateMaybeMessage<::P2SResponse>(Arena*);
template<> ::PeerInfo* Arena::CreateMaybeMessage<::PeerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PeerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PeerInfo) */ {
 public:
  inline PeerInfo() : PeerInfo(nullptr) {}
  virtual ~PeerInfo();
  explicit constexpr PeerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerInfo(const PeerInfo& from);
  PeerInfo(PeerInfo&& from) noexcept
    : PeerInfo() {
    *this = ::std::move(from);
  }

  inline PeerInfo& operator=(const PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerInfo& operator=(PeerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerInfo* internal_default_instance() {
    return reinterpret_cast<const PeerInfo*>(
               &_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeerInfo& a, PeerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerInfo* New() const final {
    return CreateMaybeMessage<PeerInfo>(nullptr);
  }

  PeerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerInfo& from);
  void MergeFrom(const PeerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PeerInfo";
  }
  protected:
  explicit PeerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protocol_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerUuidFieldNumber = 3,
    kPeerNameFieldNumber = 4,
    kHostBinaryFieldNumber = 1,
    kPortBinaryFieldNumber = 2,
  };
  // optional string peer_uuid = 3;
  bool has_peer_uuid() const;
  private:
  bool _internal_has_peer_uuid() const;
  public:
  void clear_peer_uuid();
  const std::string& peer_uuid() const;
  void set_peer_uuid(const std::string& value);
  void set_peer_uuid(std::string&& value);
  void set_peer_uuid(const char* value);
  void set_peer_uuid(const char* value, size_t size);
  std::string* mutable_peer_uuid();
  std::string* release_peer_uuid();
  void set_allocated_peer_uuid(std::string* peer_uuid);
  private:
  const std::string& _internal_peer_uuid() const;
  void _internal_set_peer_uuid(const std::string& value);
  std::string* _internal_mutable_peer_uuid();
  public:

  // optional string peer_name = 4;
  bool has_peer_name() const;
  private:
  bool _internal_has_peer_name() const;
  public:
  void clear_peer_name();
  const std::string& peer_name() const;
  void set_peer_name(const std::string& value);
  void set_peer_name(std::string&& value);
  void set_peer_name(const char* value);
  void set_peer_name(const char* value, size_t size);
  std::string* mutable_peer_name();
  std::string* release_peer_name();
  void set_allocated_peer_name(std::string* peer_name);
  private:
  const std::string& _internal_peer_name() const;
  void _internal_set_peer_name(const std::string& value);
  std::string* _internal_mutable_peer_name();
  public:

  // optional uint32 host_binary = 1;
  bool has_host_binary() const;
  private:
  bool _internal_has_host_binary() const;
  public:
  void clear_host_binary();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_binary() const;
  void set_host_binary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_binary() const;
  void _internal_set_host_binary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 port_binary = 2;
  bool has_port_binary() const;
  private:
  bool _internal_has_port_binary() const;
  public:
  void clear_port_binary();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_binary() const;
  void set_port_binary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_binary() const;
  void _internal_set_port_binary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PeerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_binary_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_binary_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class P2SResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:P2SResponse) */ {
 public:
  inline P2SResponse() : P2SResponse(nullptr) {}
  virtual ~P2SResponse();
  explicit constexpr P2SResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  P2SResponse(const P2SResponse& from);
  P2SResponse(P2SResponse&& from) noexcept
    : P2SResponse() {
    *this = ::std::move(from);
  }

  inline P2SResponse& operator=(const P2SResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2SResponse& operator=(P2SResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const P2SResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const P2SResponse* internal_default_instance() {
    return reinterpret_cast<const P2SResponse*>(
               &_P2SResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(P2SResponse& a, P2SResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(P2SResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2SResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2SResponse* New() const final {
    return CreateMaybeMessage<P2SResponse>(nullptr);
  }

  P2SResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2SResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2SResponse& from);
  void MergeFrom(const P2SResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2SResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "P2SResponse";
  }
  protected:
  explicit P2SResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_protocol_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 3,
    kMsgFieldNumber = 2,
    kStatuscodeFieldNumber = 1,
  };
  // repeated .PeerInfo info = 3;
  int info_size() const;
  private:
  int _internal_info_size() const;
  public:
  void clear_info();
  ::PeerInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfo >*
      mutable_info();
  private:
  const ::PeerInfo& _internal_info(int index) const;
  ::PeerInfo* _internal_add_info();
  public:
  const ::PeerInfo& info(int index) const;
  ::PeerInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfo >&
      info() const;

  // required string msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required uint32 statuscode = 1;
  bool has_statuscode() const;
  private:
  bool _internal_has_statuscode() const;
  public:
  void clear_statuscode();
  ::PROTOBUF_NAMESPACE_ID::uint32 statuscode() const;
  void set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statuscode() const;
  void _internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:P2SResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfo > info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statuscode_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerInfo

// optional uint32 host_binary = 1;
inline bool PeerInfo::_internal_has_host_binary() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PeerInfo::has_host_binary() const {
  return _internal_has_host_binary();
}
inline void PeerInfo::clear_host_binary() {
  host_binary_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerInfo::_internal_host_binary() const {
  return host_binary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerInfo::host_binary() const {
  // @@protoc_insertion_point(field_get:PeerInfo.host_binary)
  return _internal_host_binary();
}
inline void PeerInfo::_internal_set_host_binary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  host_binary_ = value;
}
inline void PeerInfo::set_host_binary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_binary(value);
  // @@protoc_insertion_point(field_set:PeerInfo.host_binary)
}

// optional uint32 port_binary = 2;
inline bool PeerInfo::_internal_has_port_binary() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PeerInfo::has_port_binary() const {
  return _internal_has_port_binary();
}
inline void PeerInfo::clear_port_binary() {
  port_binary_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerInfo::_internal_port_binary() const {
  return port_binary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PeerInfo::port_binary() const {
  // @@protoc_insertion_point(field_get:PeerInfo.port_binary)
  return _internal_port_binary();
}
inline void PeerInfo::_internal_set_port_binary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  port_binary_ = value;
}
inline void PeerInfo::set_port_binary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_binary(value);
  // @@protoc_insertion_point(field_set:PeerInfo.port_binary)
}

// optional string peer_uuid = 3;
inline bool PeerInfo::_internal_has_peer_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeerInfo::has_peer_uuid() const {
  return _internal_has_peer_uuid();
}
inline void PeerInfo::clear_peer_uuid() {
  peer_uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PeerInfo::peer_uuid() const {
  // @@protoc_insertion_point(field_get:PeerInfo.peer_uuid)
  return _internal_peer_uuid();
}
inline void PeerInfo::set_peer_uuid(const std::string& value) {
  _internal_set_peer_uuid(value);
  // @@protoc_insertion_point(field_set:PeerInfo.peer_uuid)
}
inline std::string* PeerInfo::mutable_peer_uuid() {
  // @@protoc_insertion_point(field_mutable:PeerInfo.peer_uuid)
  return _internal_mutable_peer_uuid();
}
inline const std::string& PeerInfo::_internal_peer_uuid() const {
  return peer_uuid_.Get();
}
inline void PeerInfo::_internal_set_peer_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  peer_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PeerInfo::set_peer_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  peer_uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PeerInfo.peer_uuid)
}
inline void PeerInfo::set_peer_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  peer_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PeerInfo.peer_uuid)
}
inline void PeerInfo::set_peer_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  peer_uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PeerInfo.peer_uuid)
}
inline std::string* PeerInfo::_internal_mutable_peer_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return peer_uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PeerInfo::release_peer_uuid() {
  // @@protoc_insertion_point(field_release:PeerInfo.peer_uuid)
  if (!_internal_has_peer_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return peer_uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PeerInfo::set_allocated_peer_uuid(std::string* peer_uuid) {
  if (peer_uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peer_uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PeerInfo.peer_uuid)
}

// optional string peer_name = 4;
inline bool PeerInfo::_internal_has_peer_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PeerInfo::has_peer_name() const {
  return _internal_has_peer_name();
}
inline void PeerInfo::clear_peer_name() {
  peer_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PeerInfo::peer_name() const {
  // @@protoc_insertion_point(field_get:PeerInfo.peer_name)
  return _internal_peer_name();
}
inline void PeerInfo::set_peer_name(const std::string& value) {
  _internal_set_peer_name(value);
  // @@protoc_insertion_point(field_set:PeerInfo.peer_name)
}
inline std::string* PeerInfo::mutable_peer_name() {
  // @@protoc_insertion_point(field_mutable:PeerInfo.peer_name)
  return _internal_mutable_peer_name();
}
inline const std::string& PeerInfo::_internal_peer_name() const {
  return peer_name_.Get();
}
inline void PeerInfo::_internal_set_peer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PeerInfo::set_peer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PeerInfo.peer_name)
}
inline void PeerInfo::set_peer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PeerInfo.peer_name)
}
inline void PeerInfo::set_peer_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  peer_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PeerInfo.peer_name)
}
inline std::string* PeerInfo::_internal_mutable_peer_name() {
  _has_bits_[0] |= 0x00000002u;
  return peer_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PeerInfo::release_peer_name() {
  // @@protoc_insertion_point(field_release:PeerInfo.peer_name)
  if (!_internal_has_peer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return peer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PeerInfo::set_allocated_peer_name(std::string* peer_name) {
  if (peer_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  peer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PeerInfo.peer_name)
}

// -------------------------------------------------------------------

// P2SResponse

// required uint32 statuscode = 1;
inline bool P2SResponse::_internal_has_statuscode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool P2SResponse::has_statuscode() const {
  return _internal_has_statuscode();
}
inline void P2SResponse::clear_statuscode() {
  statuscode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 P2SResponse::_internal_statuscode() const {
  return statuscode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 P2SResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:P2SResponse.statuscode)
  return _internal_statuscode();
}
inline void P2SResponse::_internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  statuscode_ = value;
}
inline void P2SResponse::set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:P2SResponse.statuscode)
}

// required string msg = 2;
inline bool P2SResponse::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool P2SResponse::has_msg() const {
  return _internal_has_msg();
}
inline void P2SResponse::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& P2SResponse::msg() const {
  // @@protoc_insertion_point(field_get:P2SResponse.msg)
  return _internal_msg();
}
inline void P2SResponse::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:P2SResponse.msg)
}
inline std::string* P2SResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:P2SResponse.msg)
  return _internal_mutable_msg();
}
inline const std::string& P2SResponse::_internal_msg() const {
  return msg_.Get();
}
inline void P2SResponse::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void P2SResponse::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:P2SResponse.msg)
}
inline void P2SResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:P2SResponse.msg)
}
inline void P2SResponse::set_msg(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:P2SResponse.msg)
}
inline std::string* P2SResponse::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* P2SResponse::release_msg() {
  // @@protoc_insertion_point(field_release:P2SResponse.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void P2SResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:P2SResponse.msg)
}

// repeated .PeerInfo info = 3;
inline int P2SResponse::_internal_info_size() const {
  return info_.size();
}
inline int P2SResponse::info_size() const {
  return _internal_info_size();
}
inline void P2SResponse::clear_info() {
  info_.Clear();
}
inline ::PeerInfo* P2SResponse::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:P2SResponse.info)
  return info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfo >*
P2SResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:P2SResponse.info)
  return &info_;
}
inline const ::PeerInfo& P2SResponse::_internal_info(int index) const {
  return info_.Get(index);
}
inline const ::PeerInfo& P2SResponse::info(int index) const {
  // @@protoc_insertion_point(field_get:P2SResponse.info)
  return _internal_info(index);
}
inline ::PeerInfo* P2SResponse::_internal_add_info() {
  return info_.Add();
}
inline ::PeerInfo* P2SResponse::add_info() {
  // @@protoc_insertion_point(field_add:P2SResponse.info)
  return _internal_add_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerInfo >&
P2SResponse::info() const {
  // @@protoc_insertion_point(field_list:P2SResponse.info)
  return info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
